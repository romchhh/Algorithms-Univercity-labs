import sys
import time
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QFileDialog
import matplotlib.pyplot as plt
import numpy as np

import sys
import time
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QFileDialog
import matplotlib.pyplot as plt
import numpy as np

class ArrayInput(QtWidgets.QLineEdit):
    def __init__(self):
        super().__init__()
        self.setPlaceholderText("–í–≤–µ–¥—ñ—Ç—å –º–∞—Å–∏–≤")
        self.setMinimumWidth(200)
        self.setMinimumHeight(60)
        font = self.font()
        font.setPointSize(14)
        self.setFont(font)

class ArrayOutput(QtWidgets.QTextEdit):
    def __init__(self):
        super().__init__()
        self.setReadOnly(True)
        self.setMinimumHeight(40)
        font = self.font()
        font.setPointSize(14)
        self.setFont(font)

class FileDropField(QtWidgets.QTextEdit):
    def __init__(self):
        super().__init__()
        self.setAcceptDrops(True)
        self.setMinimumHeight(100)
        self.setPlaceholderText("\n                                      üìÇ–û–±–µ—Ä—ñ—Ç—å –∞–±–æ –ø–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å —Ñ–∞–π–ª.")
        font = self.font()
        font.setPointSize(14)
        self.setFont(font)

class SortingButton(QtWidgets.QPushButton):
    def __init__(self):
        super().__init__("–°–æ—Ä—Ç—É–≤–∞—Ç–∏")
        self.setStyleSheet("background-color: green; color: white; border: 1px solid black; padding: 10px;")  

class Algorithm(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.text_fields = [ArrayInput() for _ in range(10)]
        self.output_fields = [ArrayOutput() for _ in range(10)]
        self.drop_field = FileDropField()
        self.button = SortingButton()

        layout = QtWidgets.QVBoxLayout()
        for text_field, output_field in zip(self.text_fields, self.output_fields):
            h_layout = QtWidgets.QHBoxLayout()
            h_layout.addWidget(text_field)
            h_layout.addWidget(output_field)
            layout.addLayout(h_layout)

        layout.addWidget(self.drop_field)
        layout.addWidget(self.button)
        layout.setSpacing(10)

        scroll_area = QtWidgets.QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_widget = QtWidgets.QWidget()
        scroll_widget.setLayout(layout)
        scroll_area.setWidget(scroll_widget)

        main_layout = QtWidgets.QVBoxLayout()
        main_layout.addWidget(scroll_area)
        self.setLayout(main_layout)

        self.drop_field.dragEnterEvent = self.drag_enter_event
        self.drop_field.dropEvent = self.drop_event
        self.drop_field.mousePressEvent = self.choose_file

        self.button.clicked.connect(self.sort_arrays)
        
    def choose_file(self, event):
        # –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥—ñ–∞–ª–æ–≥–æ–≤–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(self, 'Open File', '', 'Text files (*.txt)')
        if file_path:
            try:
                with open(file_path, 'r') as file:
                    arrays = []
                    for line in file:
                        if line.strip().startswith('[') and line.strip().endswith(']'):
                            line = line.strip()[1:-1]  # –í–∏–¥–∞–ª—è—î–º–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ñ –¥—É–∂–∫–∏ –∑ –ø–æ—á–∞—Ç–∫—É —Ç–∞ –∫—ñ–Ω—Ü—è —Ä—è–¥–∫–∞
                            numbers = []
                            for val in line.split():
                                try:
                                    num = float(val)
                                    numbers.append(num)
                                except ValueError:
                                    # –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–µ —É float, –≤–∏–≤–µ—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                                    self.output_fields[0].setPlainText("‚ùó–ù–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
                                    break
                            else:
                                # –Ø–∫—â–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω—ñ —É float, –¥–æ–¥–∞—Ç–∏ –º–∞—Å–∏–≤ —É —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
                                arrays.append(numbers)
                                continue
                        # –û—á–∏—Å—Ç–∏—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–µ –ø–æ–ª–µ, —è–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ–¥—ñ–π—Å–Ω–µ
                            self.output_fields[0].clear()

                        # –í–∏–≤–µ—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –ø–æ—Ä—É—á –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø–æ–ª–µ–º
                            self.output_fields[0].setPlainText("‚ùó–ù–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")

                    # –í–∏–≤—ñ–¥ –º–∞—Å–∏–≤—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–ª—è
                    for i, array in enumerate(arrays):
                        if i < len(self.text_fields):
                            # –†–æ–∑–¥–≤–ª—è—î–º–æ –º–∞—Å–∏–≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏–º–∏ –¥—É–∂–∫–∞–º–∏ [] —ñ —Ä–æ–∑–¥—ñ–ª—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –ø—Ä–æ–±—ñ–ª–∞–º–∏
                            formatted_array = "[" + " ".join(map(str, array)) + "]"
                            self.text_fields[i].setText(formatted_array)
            except Exception as e:
                print("Error:", e)

    def sort_arrays(self):
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Å–∏–≤—ñ–≤ –∑ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        arrays = []
        times = []  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞
        for i, text_field in enumerate(self.text_fields):
            text = text_field.text().strip()  # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ –∑ –ø–æ—á–∞—Ç–∫—É —ñ –∫—ñ–Ω—Ü—è —Ä—è–¥–∫–∞
            if text.startswith('[') and text.endswith(']'):
                text = text[1:-1]  # –í–∏–¥–∞–ª—è—î–º–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ñ –¥—É–∂–∫–∏ –∑ –ø–æ—á–∞—Ç–∫—É —Ç–∞ –∫—ñ–Ω—Ü—è –º–∞—Å–∏–≤—É
                numbers = []
                for val in text.split():
                    try:
                        num = float(val)
                        numbers.append(num)
                    except ValueError:
                        # –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–µ —É float, –≤–∏–≤–µ—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        self.output_fields[i].setPlainText("‚ùó–ù–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
                        break
                else:
                    # –Ø–∫—â–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω—ñ —É float, –¥–æ–¥–∞—Ç–∏ –º–∞—Å–∏–≤ —É —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
                    arrays.append(numbers)
                    self.output_fields[i].setPlainText("")  # –û—á–∏—â–∞—î–º–æ –≤–∏—Ö—ñ–¥–Ω–µ –ø–æ–ª–µ, —è–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ–ø—É—Å—Ç–∏–º—ñ
                    continue
            else:
                # –û—á–∏—Å—Ç–∏—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–µ –ø–æ–ª–µ, —è–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ–¥—ñ–π—Å–Ω–µ
                self.output_fields[i].clear()

                # –í–∏–≤–µ—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –ø–æ—Ä—É—á –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø–æ–ª–µ–º
                self.output_fields[i].setPlainText("‚ùó–†—è–¥–æ–∫ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –º–∞—Å–∏–≤—É.")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–∞–Ω—ñ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞
        if arrays:
            # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—ñ–≤ —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏ —Ç–∞ —á–∞—Å—É —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—å
            for array in arrays:
                start_time = time.perf_counter()  # –ü–æ—á–∞—Ç–æ–∫ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É
                self.binary_insertion_sort(array)
                end_time = time.perf_counter()  # –ö—ñ–Ω–µ—Ü—å –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É
                sorting_time = (end_time - start_time) * 1000  # –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è —á–∞—Å—É –∑ —Å–µ–∫—É–Ω–¥ —É –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏
                times.append((len(array), sorting_time))  # –î–æ–¥–∞—î–º–æ –¥–æ–≤–∂–∏–Ω—É –º–∞—Å–∏–≤—É —Ç–∞ —á–∞—Å —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
                print("Array length:", len(array))
                print("Sorting time:", sorting_time, "milliseconds")

            # –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
            self.plot_graph(times)

            # –í–∏–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –º–∞—Å–∏–≤—ñ–≤
            for i, array in enumerate(arrays):
                output_field = self.output_fields[i]
                output_field.setPlainText(str(array))
        else:
            print("No arrays to sort.")

    def binary_insertion_sort(self, array):
        # –ë—ñ–Ω–∞—Ä–Ω–µ –≤—Å—Ç–∞–≤–ª—è–Ω–Ω—è
        for i in range(1, len(array)):
            key = array[i]
            low = 0
            high = i - 1
            while low <= high:
                mid = (low + high) // 2
                if array[mid] < key:
                    low = mid + 1
                else:
                    high = mid - 1
            for j in range(i, low, -1):
                array[j] = array[j-1]
            array[low] = key

    def drag_enter_event(self, event):
        if event.mimeData().hasUrls:
            event.accept()
        else:
            event.ignore()

    def drop_event(self, event):
        for url in event.mimeData().urls():
            path = url.toLocalFile()
            try:
                with open(path, 'r') as file:
                    arrays = []
                    for line in file:
                        if line.strip().startswith('[') and line.strip().endswith(']'):
                            line = line.strip()[1:-1]  # –í–∏–¥–∞–ª—è—î–º–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ñ –¥—É–∂–∫–∏ –∑ –ø–æ—á–∞—Ç–∫—É —Ç–∞ –∫—ñ–Ω—Ü—è —Ä—è–¥–∫–∞
                            numbers = []
                            for val in line.split():
                                try:
                                    num = float(val)
                                    numbers.append(num)
                                except ValueError:
                                    # –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–µ —É float, –≤–∏–≤–µ—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                                    self.output_fields[0].setPlainText("‚ùó–ù–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
                                    break
                            else:
                                # –Ø–∫—â–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω—ñ —É float, –¥–æ–¥–∞—Ç–∏ –º–∞—Å–∏–≤ —É —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
                                arrays.append(numbers)
                                continue
                        # –û—á–∏—Å—Ç–∏—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–µ –ø–æ–ª–µ, —è–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ–¥—ñ–π—Å–Ω–µ
                            self.output_fields[0].clear()

                        # –í–∏–≤–µ—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –ø–æ—Ä—É—á –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø–æ–ª–µ–º
                            self.output_fields[0].setPlainText("‚ùó–ù–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")

                # –í–∏–≤—ñ–¥ –º–∞—Å–∏–≤—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–ª—è
                    for i, array in enumerate(arrays):
                        if i < len(self.text_fields):
                            # –†–æ–∑–¥–≤–ª—è—î–º–æ –º–∞—Å–∏–≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏–º–∏ –¥—É–∂–∫–∞–º–∏ [] —ñ —Ä–æ–∑–¥—ñ–ª—è—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –ø—Ä–æ–±—ñ–ª–∞–º–∏
                            formatted_array = "[" + " ".join(map(str, array)) + "]"
                            self.text_fields[i].setText(formatted_array)
            except Exception as e:
                print("Error:", e)

    def plot_graph(self, data):
        lengths, times = zip(*data)
        
        # –ê–ø—Ä–æ–∫—Å–∏–º—É—î–º–æ –ª—ñ–Ω—ñ—é –Ω–∞–π–º–µ–Ω—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç—ñ–≤ –¥–ª—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        p = np.polyfit(lengths, times, 3)  # –ü–æ–ª—ñ–Ω–æ–º —Ç—Ä–µ—Ç—å–æ–≥–æ —Å—Ç–µ–ø–µ–Ω—è
        new_lengths = np.linspace(min(lengths), max(lengths), 1000)
        new_times = np.polyval(p, new_lengths)
        
        # –û–±—á–∏—Å–ª–µ–Ω–Ω—è —á–∞—Å—É –∑–∞ —Ñ–æ—Ä–º—É–ª–æ—é O(n log n) –¥–ª—è –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–æ–≤–∂–∏–Ω
        log_times = [length * np.log(length) / 1000 for length in new_lengths]  # –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥ –≤ —Å–µ–∫—É–Ω–¥–∏
        
        # –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–æ–≥–æ —á–∞—Å—É —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏
        theoretical_log_times = [length * np.log(length) / 1000 for length in lengths]  # –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥ –≤ —Å–µ–∫—É–Ω–¥–∏
        
        # –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
        plt.figure(figsize=(10, 5))
        
        # –ì—Ä–∞—Ñ—ñ–∫ –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö (–ø—Ä–∞–∫—Ç–∏—á–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å)
        plt.subplot(1, 2, 1)
        plt.plot(new_lengths, new_times, color='blue', linestyle='-', linewidth=2)
        plt.scatter(lengths, np.array(times)/10, color='red', marker='o')  # –ü–æ–¥—ñ–ª –∑–Ω–∞—á–µ–Ω—å —á–∞—Å—É –Ω–∞ 10
        plt.xlabel('–î–æ–≤–∂–∏–Ω–∞ –º–∞—Å–∏–≤—É')
        plt.ylabel('–ß–∞—Å —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è (–º—Å)')
        plt.title('–ü—Ä–∞–∫—Ç–∏—á–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å')
        plt.grid(True)
        
        # –ì—Ä–∞—Ñ—ñ–∫ O(n log n) (—Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å)
        plt.subplot(1, 2, 2)
        plt.plot(new_lengths, log_times, color='green', linestyle='-', linewidth=2)
        plt.scatter(lengths, theoretical_log_times, color='red', marker='o')  # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ç–æ—á–∫–∏ –¥–ª—è —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–æ–≥–æ —á–∞—Å—É
        plt.xlabel('–î–æ–≤–∂–∏–Ω–∞ –º–∞—Å–∏–≤—É')
        plt.ylabel('–ß–∞—Å —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è (–º—Å)')
        plt.title('–¢–µ–æ—Ä–µ—Ç–∏—á–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å')
        plt.grid(True)
        
        plt.tight_layout()
        plt.show()
